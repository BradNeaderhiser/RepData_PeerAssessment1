arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran2, ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size/2^20)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size +1000)
summarize(cran, avgbytes = mean(size))
summarize(cran, avg_bytes = mean(size))
remove(list=ls())
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(.cran, package)
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = .99)
top_unique <- filter(pack_sum, unique > 456)
top_unique <- filter(pack_sum, unique > 465)
View()
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View()
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit
submit()
submit()
submit()
submit()
submit()
submit()
remove(list=ls())
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"), "_")
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
submit()
submit()
submit()
?spread
submit()
exctact_numeric("class5")
extract_numeric("class5")
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
?bind_rows
bind_rows(passed, failed)
sat
submit()
submit()
submit()
rm(ls())
remove(list=lm())
remove(list=ls())
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
library(datasets)
hist(airquality$Ozone)
plot(airquality$Wind, airquality$Ozone)
with(airquality, plot(Wind, Ozone))
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlabel = 'Month', ylabel ="Ozone (ppb)")
boxplot(Ozone ~ Month, airquality, xlab = 'Month', ylab ="Ozone (ppb)")
swirl()
library(swirl)
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
summary(ppm)
quantile(ppm)
boxplot(ppm, col = "blue")
abline(h = 12)
hist(ppm, col="green")
rug(ppm)
low
high
hist(ppm, col="green", breaks=100)
rug(ppm)
hist(ppm, col="green")
abline(v=12, lwd = 2)
abline(v=12, col="magenta", lwd = 4)
play()
hist(ppm, col="green")
abline(v=12, lwd = 2)
nxt()
abline(v=media(ppm), col="magenta", lwd = 4)
abline(v=median(ppm), col="magenta", lwd = 4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col="wheat", main = "Number of Counties in Each Region")
boxplot(pm25 ~ region, pollution, col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
subset(pollution, region == "east")
east<-subset(pollution, region == "east")
head
head(east)
hist(pm25, east, col="green")
hist(pm25, data=east, col="green")
hist(east$pm25, col="green")
hist(subset(pollution,region=="west")$pm25, col="green")
with(pollution, plot(latitude, pm25))
abline(h=12, lwd = 2, lty = 2)
plot(pollution$latitude, pollution$pm25, col = pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h=12, lwd = 2, lty = 2)
?dev.copy2pdf
install.packages("lattice")
library(lattice)
library(datasets)
xyplot(Ozone ~ Wind, data = airquality)
airquality <- transform(airquality, Month=factor(Month))
xyplot(Ozone ~ Wind | Month , data = airquality)
xyplot(Ozone ~ Wind | Month , data = airquality, layout=c(5,1))
set.seed(10)
x <- r.norm(100)
x <- rnorm(100)
f <- rep(0:1, each=50)
y <- x+f - f*x + rnorm(100, sd = 0.5)
f <- factor(f, levels = c("Group 1", "Group 2"))
xyplot(y~x|f, layout=c(2,1))
xyplot(y ~ x | f, layout=c(2,1))
xyplot(y ~ x)
xyplot(y ~ x | f)
f
f <- rep(0:1, each=50)
f <- factor(f, labels = c("Group 1", "Group 2"))
f
xyplot(y ~ x | f, layout=c(2,1))
xyplot(y ~ x | f, panel = function(x,y,...){}
xyplot(y ~ x | f, panel = function(x,y,...){
xyplot(x,y,...)
xyplot(y ~ x | f, panel = function(x,y,...){
panel.xyplot(x,y,...)
panel.abline(h = median(y), lty=2)
})
install.packages("ggplot2")
library(data.table)
fread
library('data.table')
/fread
?fread
install.packages("data.table")
?fread
library(data.table)
?fread
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?xyplot
library(datasets)
data(airquality)
xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
str(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ as.factor(Month))
airquality = transform(airquality, Month = factor(Month))
str(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
install.packages("kernlab")
library(kernlab)
data(spam)
summarize(spam)
structure(spam)
set.seed(3435)
trainIndicator(4631, size = 1, prob=0.5)
trainIndicator = rbinom(4631, size = 1, prob=0.5)
names(spam)
table(trainIndicator)
trainspam = spam[trainIndicator == 1, ]
testspam = spam[trainIndicator == 0, ]
table(trainspam$type)
plot(trainspam$capitalAve ~ trainspam$type)
plot(log10(trainspam$capitalAve) ~ trainspam$type)
plot(log10(trainspam$capitalAve) +1 ~ trainspam$type)
plot(log10(trainspam[ , 1:4] +1))
hCluster = hclust(dist(t(trainspam[ , 1:57])))
plot(hCluster)
hClusterUpdated = hclust(dist(t(log10(trainspam[ , 1:55] +1)))
)
plot(hClusterUpdated)
trainspam$numtype = as.numeric(trainspam$type) - 1
cvError = rep(NA, 55)
library(boot)
55)
{
lmFormula = reformulate(names(trainspam)[i], response = "numType")
glmFit = glm(lmFormula, family = "binomial", data = traimspam)
cvError[i] = cv.glm(trainspam, glmFit, costFunction, 2)$delta[2]
}
for (i in 1:55)
{
lmFormula = reformulate(names(trainspam)[i], response = "numtype")
glmFit = glm(lmFormula, family = "binomial", data = traimspam)
cvError[i] = cv.glm(trainspam, glmFit, costFunction, 2)$delta[2]
}
for (i in 1:55)
{
lmFormula = reformulate(names(trainspam)[i], response = "numtype")
glmFit = glm(lmFormula, family = "binomial", data = trainspam)
cvError[i] = cv.glm(trainspam, glmFit, costFunction, 2)$delta[2]
}
remove(list())
list
obj list
listobh
list()
list()
list[]
ls
ls()
rm (list=ls())
unzip
unzip("activity.zip")
setwd("~/Desktop/DataScienceSignatureTrack/ReproducibleResearch/Project1")
unzip("activity.zip")
read.csv
read.csv?
? read.csv
activityData <- read.csv("activity.csv")
head(activityData)
structure
structure(activityData)
str(activityData)
activityData <- read.csv("activity.csv",head=TRUE, na.strings="NA", colClasses=c("int","character","int"))
activityData <- read.csv("activity.csv",head=TRUE, na.strings="NA", colClasses=c("numeric","character","numeric"))
str(activityData)
activityData <- read.csv("activity.csv",head=TRUE, na.strings="NA", colClasses=c("integer","character","numeric"))
str(activityData)
activityData <- read.csv("activity.csv",head=TRUE, na.strings="NA", colClasses=c("integer","character","factor"))
str(activityData)
activityData <- read.csv("activity.csv",head=TRUE, na.strings="NA", colClasses=c("integer","character","integer"))
str(activityData)
? apply
? tapply
tapply(activityData$steps, activityData$date, sum)
tapply(activityData$steps, activityData$date, sum)
stepsPerDay <- tapply(activityData$steps, activityData$date, sum)
str(stepsPerDay)
tapply (stepsPerDay, mean, rm.na = TRUE)
sapply (stepsPerDay, mean, rm.na = TRUE)
mean(stepsPerDay, rm.na = TRUE)
sum(stepsPerDay)
sum(stepsPerDay, rm.na)
?mean
mean(stepsPerDay, na.rm = TRUE)
sum(stepsPerDay, na.rm)
sum(setpsPerDay)
sum(stepsPerDay)
?sum
sum(stepsPerDay, na.rm=TRUE)
570608/61
stepsPerDay <- tapply(activityData$steps, activityData$date, sum, na.rm=TRUE)
hist(stepsPerDay)
mean(stepsPerDay)
stepsPerDay2 <- stepsPerDay[>0]
stepsPerDay2 <- stepsPerDay[which(stepsPerDay > 0)]
mean(stepsPerDay2)
hist(stepsPerDay2)
?ggplot
library(ggplot)
library(ggplot2)
?ggplot
hist(stepsPerDay2)
col="red"
?ggplot
?hist
source('~/Desktop/DataScienceSignatureTrack/ReproducibleResearch/Project1/Project1.R')
source('~/Desktop/DataScienceSignatureTrack/ReproducibleResearch/Project1/Project1.R')
hist(stepsPerDay2)
mean(stepsPerDay)
stepsPerDayAvg <- c(mean(stepsPerDay), median(stepsPerDay))
c(mean(stepsPerDay), median(stepsPerDay))
as.int(c(mean(stepsPerDay), median(stepsPerDay)))
vector(c(mean(stepsPerDay), median(stepsPerDay)))
source('~/Desktop/DataScienceSignatureTrack/ReproducibleResearch/Project1/Project1.R')
source('~/Desktop/DataScienceSignatureTrack/ReproducibleResearch/Project1/Project1.R')
stepsPerDayAvg
print(stepsPerDayAvg)
source('~/Desktop/DataScienceSignatureTrack/ReproducibleResearch/Project1/Project1.R')
rm(list=ls())
source('~/Desktop/DataScienceSignatureTrack/ReproducibleResearch/Project1/Project1.R')
rm(list=ls())
source('~/Desktop/DataScienceSignatureTrack/ReproducibleResearch/Project1/Project1.R')
stepsPerTime <- tapply(activityData$steps, activityData$interval, mean, na.rm=TRUE)
plot(stepsPerTime)
plot(stepsPerTime, type='l')
plot(stepsPerTime, type='l', main)
max(stepsPerTime)
stepsPerTime[which(stepsPerTime == max(stepsPerTime))]
names(stepsPerTime)
names(stepsPerTime[1])
names(stepsPerTime[which(stepsPerTime==max(stepsPerTime))])
plot(stepsPerTime, type="l", col="black", main="Avg. Steps Throughout the Day",
xlab="Daily Time Interval", ylab="Avgerage (mean) Steps")
##    dev.off()
##    message(paste("Chart Complete. Stored as ",getwd(),"/",outfile,sep=""))
##    rm(outfile)
#Calculate averages
maxStepsTime <- c(names(stepsPerTime[which(stepsPerTime == max(stepsPerDay)),
max(stepsPerTime))
names(maxStepsTime) <- c('Time of Max Avg.', 'Average Steps (max)')
print(maxStepsTime)
##    rm(maxStepsTime)
maxStepsTime <- c(names(stepsPerTime[which(stepsPerTime == max(stepsPerDay))]),
max(stepsPerTime))
names(maxStepsTime) <- c('Time of Max Avg.', 'Average Steps (max)')
print(maxStepsTime)
##    rm(maxStepsTime)
maxStepsTime <- c(names(stepsPerTime[which(stepsPerTime == max(stepsPerDay))]),
max(stepsPerTime))
names(maxStepsTime) <- c('Time of Max Avg.', 'Average Steps (max)')
print(maxStepsTime)
##    rm(maxStepsTime)
xStepsTime <- c(names(stepsPerTime[which(stepsPerTime == max(stepsPerDay))]),
stepsPerTime[which(stepsPerTime==max(stepsPerTime))])
names(maxStepsTime) <- c('Time of Max Avg.', 'Average Steps (max)')
print(maxStepsTime)
##    rm(maxStepsTime)
names(stepsPerTime[which(stepsPerTime == max(stepsPerDay))]
)
stepsPerTime[which(stepsPerTime == max(stepsPerTime))]
names[stepsPerTime[which(stepsPerTime == max(stepsPerTime))]]
stepsPerTime$names[stepsPerTime[which(stepsPerTime == max(stepsPerTime))]]
names(stepsPerTime)
names(stepsPerTime)[which(stepsPerTime == max(stepsPerTime))]
sPerTime)[which(stepsPerTime == max(stepsPerTime))],
stepsPerTime[which(stepsPerTime==max(stepsPerTime))])
names(maxStepsTime) <- c('Time of Max Avg.', 'Average Steps (max)')
print(maxStepsTime)
##    rm(maxStepsTime)
maxStepsTime <- as.list(c(names(stepsPerTime)[which(stepsPerTime == max(stepsPerTime))],
)
maxStepsTime <- as.list(c(names(stepsPerTime)[which(stepsPerTime == max(stepsPerTime))],
stepsPerTime[which(stepsPerTime==max(stepsPerTime))])))
maxSteps <- as.list(names(stepsPerTime)[which(stepsPerTime == max(stepsPerTime))])
maxSteps <- as.list(names(stepsPerTime)[which(stepsPerTime == max(stepsPerTime))], max(stepsPerTime))
max(stepsPerTime)
maxSteps <- as.list(max(StepsPerTime))
maxSteps <- as.list(max(stepsPerTime))
maxSteps <- as.list(names(stepsPerTime)[which(stepsPerTime == max(stepsPerTime))])
maxSteps <- as.list(c(names(stepsPerTime)[which(stepsPerTime == max(stepsPerTime))],max(stepsPerTime)))
names(maxSteps) <- c('Time Interval when Max. Avg. Steps Occur', 'Maximum Average Steps')
maxSteps
source('~/Desktop/DataScienceSignatureTrack/ReproducibleResearch/Project1/Project1.R')
daysrecorded <- as.POSIXct(date,format="%Y-%m-%d")
daysrecorded <- as.date
daysrecorded <- as.POSIXct(activityData$date,format="%Y-%m-%d")
daysrecorded
weekdays(daysrecorded)
which(weekdays(daysrecorded) == '')
which(weekdays(daysrecorded) == "Sunday")
recode(weekdays(daysrecorded), "c('Saturday','Sunday') = 'Weekend'; else = 'Weekday")
sundays <- which(weekdays(daysrecorded) == "Sunday")
sundays
where(weekdays(daysrecorded) == "Sunday")
?match
daysrecorded["Sunday"]
daysrecorded("Sunday")
daysrecorded[daysrecorded == "Sunday"] <- "Weekend"
daysrecordedtext <- as.char(daysrecorded)
daysrecordedtext <- as.character(daysrecorded)
daysrecordedtext <- weekdays(daysrecorded)
daysrecordedtext[daysrecordedtext == "Sunday"] <- "Weekend"
daysrecordedtext
daynames <- weekdays(daysrecorded)
library(dplyr)
?cbind
?join
activityData2 <- cbind(activityData, daynames)
daynames <- weekdays(daysrecorded)
weekportion <- rep(1:lenght(daynames),"Weekday")
weekportion <- rep(1:length(daynames),"Weekday")
weekportion <- rep("Weekday",1:length(daynames))
weekportion <- rep("Weekday",length(daynames))
weekportion[daynames == "Sunday" | daynames == "Saturday"] <- "Weekend"
table(weekportion)
table(daynams ~ weekportion)
table(daynams, weekportion)
table(daynames, weekportion)
##Create Identifier for Weekdays
##Get Name of days
dayNames <- weekdays(activityData$date)
##Initialize array for weekportion inicator to weekday
weekPortion <- rep("Weekday",length(dayNames))
##Recode sunday and saturday to weekend
weekPortion[dayNames == "Sunday" | dayNames == "Saturday"] <- "Weekend"
## Map back onto dataset
activityData3 <- cbing(activityData, weekPortion)
#Transform character date into date field
daysRecorded <- as.POSIXct(activityData$date, format="%Y-%m-%d")
##Get Name of days
dayNames <- weekdays(daysRecorded)
##Initialize array for weekportion inicator to weekday
weekPortion <- rep("Weekday",length(dayNames))
##Recode sunday and saturday to weekend
weekPortion[dayNames == "Sunday" | dayNames == "Saturday"] <- "Weekend"
## Map back onto dataset
activityData3 <- cbin(activityData, weekPortion)
activityData3 <- cbind(activityData, weekPortion)
g <- ggplot(a, aes(year,totalemit, group=1))
library(ddply)
library(dplyr)
stepsPerTime <- ddply(activityData3, .(interval, weekPortion), summarize, totalemit = mean(steps))
library(plyr)
stepsPerTime <- ddply(activityData3, .(interval, weekPortion), summarize, totalemit = mean(steps))
str(stepsPerTime)
stepsPerTime <- ddply(activityData3, .(interval, weekPortion), summarize, avgSteps = mean(steps), na.rm=TRUE)
stepsPerTime <- ddply(activityData3, .(interval, weekPortion), summarize, avgSteps = mean(steps, na.rm=TRUE))
g <- ggplot(stepsPerTime, aes(interval,avgSteps, group=1))
print(g)
g<-g+facet_grid(weekportion~.)
g <- g + geom_line(color="blue")
ptint(g)
print(g)
g <- ggplot(stepsPerTime, aes(interval,avgSteps))
print(g)
g<- ggplot(stepsPerTime, interval ~ avgSteps)
g <- ggplot(stepsPerTime, aes(interval,avgSteps, group = 1))
g <- g + facet_grid(.~weekPortion)
g <- g + geom_line(color="blue")
g <- g + xlab("Year Recorded")
g <- g + ylab("Total Emmissions (in tons)")
g <- g + ggtitle(expression("Motor Vehicle Emissions for Los Angeles and Baltimore (" * PM[2.5] * ")"))
g <- g + theme_bw()
print(g)
g <- g + facet_grid(weekportion~.)
print(g)
?ggplot
g <- g + facet_grid(weekportion)
g <- ggplot(stepsPerTime, aes(interval,avgSteps))
print(g)
g <- facet_grid(weekPortion ~ .)
print(g)
g <- ggplot(stepsPerTime, aes(interval,avgSteps))
g <- g + facet_grid(weekPortion ~ .)
print(g)
g <- g + geom_line(color="blue")
pring(g)
print(g)
rm(list=ls())
source('~/Desktop/DataScienceSignatureTrack/ReproducibleResearch/Project1/Project1.R')
source('~/Desktop/DataScienceSignatureTrack/ReproducibleResearch/Project1/Project1.R')
is.na(activityData$steps)
table(is.na(activityData$steps))
message("Indicator table for rows with steps data missing (TRUE = missing)")
table(is.na(activityData$steps))
stepsPerTime <- ddply(activityData3, .(interval), summarize,
avgSteps = mean(steps, na.rm=TRUE))
?join
activityData2 <- join(activityData3, stepsPerTime, by = interval, type = "left", match = "all")
activityData2 <- join(activityData3, stepsPerTime, by = "interval", type = "left", match = "all")
activityData2$steps[is.na(steps)] <- activityData2$avgSteps[is.na(steps)]
activityData2$steps[is.na(activityData$steps)] <- activityData2$avgSteps[is.na(activityData$steps)]
head(activityData2,200)
activityData2 <- activityData2[ , 1:4]
rm(list=ls())
source('~/Desktop/DataScienceSignatureTrack/ReproducibleResearch/Project1/Project1.R')
rm(list=ls())
source('~/Desktop/DataScienceSignatureTrack/ReproducibleResearch/Project1/Project1.R')
source('~/Desktop/DataScienceSignatureTrack/ReproducibleResearch/Project1/Project1.R')
rm(list=ls())
source('~/Desktop/DataScienceSignatureTrack/ReproducibleResearch/Project1/Project1.R')
